var App = App || {}, container, camera, controls, renderer, gui, listObjOfScene = [], defaultPointColor = "009687", num, number, objOfScene, radiusOfMainSphere, previousNameFolder, previousNumber, sphereCenter = {}, maxNumber = 999, lastVal = [], animateSpeedOfObj = [], cubeHelper, skyBox, parent, accessPoint = [], intersectPoint = [], addLastVal = function (a, b, c) {
    for (var d = 0; d < c.length; d++)if (c[d].name = a) {
        c[d].value = b;
        return
    }
    c.push({name: a, value: b})
}, getlastVal = function (a, b) {
    for (var c = 0; c < b.length; c++)if (b[c].name = a)return b[c].value
}, datGUI =
{gui: {}, numberField: {}, item: [], btn: "", name: "", menuFolder: {}, generationFolder: {}, editFolder: {}, keysFolder: {}, anglesFolder: {}, revoModeFolder: {}, figureAnimateSet: {}, generalAnimateSet: {}, coord: {}, generalSet: {}, maxNumber: {}, generateParameters: {moreThan3: !1, number: 0, coords: "", generate: function () {
    App.rebuildNodes(name);
    this.addEditInfo(num)
}, startAnimation: function () {
    for (var a = !1, b = 0; b < App.scene.children.length; b++)App.scene.children[b].isAnimateObject && (a = !0, App.scene.children[b].helpers.animateObj(App.scene.children[b].name));
    a || alert("you do not have any object to animate")
}, generalSet: {duration: 180, lastDuratValue: 180}, maxGenereDurtn: 180, cubeVisible: !0, mainCubeColor: 16515220, littleCubesColor: 796663, listTexture: []}, init: function () {
    this.gui = 800 > window.innerWidth ? new dat.GUI({width: 290}) : new dat.GUI({width: 255});
    this.gui.open();
    this.menuFolder = this.gui.addFolder("Menu");
    this.menuFolder.open();
    this.generationFolder = this.menuFolder.addFolder("Generation");
    this.editFolder = this.menuFolder.addFolder("Edit");
    this.keysFolder = this.menuFolder.addFolder("List of the Keys");
    this.anglesFolder = this.menuFolder.addFolder("Angles and Surfaces");
    this.revoModeFolder = this.menuFolder.addFolder("Revolution Mode");
    this.figureAnimateSet = this.revoModeFolder.addFolder("Figure Settings");
    this.generalAnimateSet = this.revoModeFolder.addFolder("General Settings");
    this.coord = this.generationFolder.addFolder("Coordinates");
    this.generalSet = this.menuFolder.addFolder("General Settings");
    this.addDfltFolder()
}, addDfltFolder: function () {
    this.generationFolder.add(this.generateParameters, "moreThan3").name("> 3-digit number").onChange(function (a) {
        a ?
            datGUI.maxNumber = 99999 : datGUI.maxNumber = 999;
        this.generationFolder.__controllers.slice(this.generationFolder.__controllers.indexOf(this.numberField), 1);
        $(".cr.number.has-slider").eq(0).remove();
        datGUI.generateParameters.number = 0;
        datGUI.resArr && datGUI.clearGenerationFolder(datGUI.generationFolder);
        this.numberField = datGUI.generationFolder.add(datGUI.generateParameters, "number", 100).max(this.maxNumber).step(1).name("Enter Coordinates:").onChange(function (a) {
            datGUI.name = a;
            if (isNaN(a))alert("Please, input a number.");
            else {
                datGUI.resArr && datGUI.clearGenerationFolder(datGUI.generationFolder);
                num = a;
                datGUI.resArr = generator(num);
                for (a = 0; a < datGUI.resArr.length; a++)datGUI.generateParameters.coords = datGUI.resArr[a][0] + "," + datGUI.resArr[a][1] + "," + datGUI.resArr[a][2], datGUI.item[a] = datGUI.coord.add(datGUI.generateParameters, "coords").name("Coordinate " + a);
                datGUI.btn = datGUI.generationFolder.add(datGUI.generateParameters, "generate");
                datGUI.btn.name("Create!")
            }
        })
    });
    this.numberField = this.generationFolder.add(this.generateParameters,
            "number", 100).max(999).step(1).name("Enter Coordinates:").onChange(function (a) {
            datGUI.name = a;
            if (isNaN(a))alert("Please, input a three-digit number."); else {
                datGUI.resArr && datGUI.clearGenerationFolder(datGUI.generationFolder);
                num = a;
                datGUI.resArr = generator(num);
                for (a = 0; a < datGUI.resArr.length; a++)datGUI.generateParameters.coords[a] = [], datGUI.generateParameters.coords = datGUI.resArr[a][0] + "," + datGUI.resArr[a][1] + "," + datGUI.resArr[a][2], datGUI.item[a] = datGUI.coord.add(datGUI.generateParameters, "coords").name("Coordinate " +
                    a);
                datGUI.btn = datGUI.generationFolder.add(datGUI.generateParameters, "generate");
                datGUI.btn.name("Create!")
            }
        });
    this.generalAnimateSet.add(this.generateParameters.generalSet, "duration").min(0).max(180).step(1).onChange(function (a) {
        this.generateParameters.generalSet.lastDuratValue = a;
        this.setMaxTimeForAnimationFigures(a)
    });
    this.revoModeFolder.add(this.generateParameters, "startAnimation").name("Begin");
    this.generalSet.add(this.generateParameters, "cubeVisible").name("Main Visible").onChange(function (a) {
        cubeHelper.visible =
            a
    });
    this.generalSet.add(this.generateParameters, "cubeVisible").name("Cube Visible").onChange(function (a) {
        cubeHelper.getObjectByProperty("category", "mainCube").visible = a
    });
    this.generalSet.add(this.generateParameters, "cubeVisible").name("Cubes Visible").onChange(function (a) {
        App.rebuildCubes.setVisibleForChild(a, "littleCube")
    });
    this.generalSet.add(this.generateParameters, "cubeVisible").name("Point Label Visible").onChange(function (a) {
        App.rebuildCubes.setVisibleForChild(a, "cubeLabel")
    });
    this.generalSet.addColor(this.generateParameters,
        "mainCubeColor").name("Main Cube Color").onChange(function (a) {
            App.rebuildCubes.changeColorMainCube(a)
        });
    this.generalSet.addColor(this.generateParameters, "littleCubesColor").name("Color for cubes").onChange(function (a) {
        App.rebuildCubes.changeColorLittleCubes(a)
    });
    this.generalSet.add(this.generateParameters, "listTexture", "NONE mountain siege starfield misty tidepool".split(" ")).name("Background").onChange(function (a) {
        App.rebuildSkyBox.changeBackground(a)
    });
    $(".hue-field").width(10);
    $("select").css("color",
        "black")
}, clearGenerationFolder: function (a) {
    for (var b = 0; b < datGUI.resArr.length; b++)datGUI.item[b].domElement.remove(), a.remove(datGUI.item[b]);
    datGUI.resArr && a.remove(datGUI.btn)
}, setMaxTimeForAnimationFigures: function (a) {
    for (a = 0; a < animateSpeedOfObj.length; a++) {
        var b = animateSpeedOfObj[a];
        b.startAn.domElement.remove();
        b.durAn.domElement.remove();
        b.curFigSet.remove(b.startAn);
        b.curFigSet.remove(b.durAn);
        addFigureAnimSet(b.curFigSet, b.name)
    }
}, addEditInfo: function (a) {
    a = {visible: !0, opacity: 5, figure: {displayNumbers: !0,
        displayPoints: !0, displayLines: !0, displayCircle: !0, fillFigure: !0}, colorNumbers: "#9012e8", colorTubes: "#22a6cf", colorCircle: "#22a6cf", colorFill: "#22a6cf"};
    var b = "Figure " + this.name;
    previousNumber && previousNumber === name && (b = previousNameFolder + "1", num += " |");
    previousNumber = name;
    previousNameFolder = b;
    var c = this.editFolder.addFolder("Figure " + num);
    this.addLastVal(b, !0, lastVal);
    c.add(a.figure, "displayPoints").name("Display Points").onChange(function (a) {
        objOfScene.tipsArray.toggleVisible(b, a);
        objOfScene.pointsArray.toggleVisible(b);
        this.addLastVal(name, a, lastVal)
    });
    c.add(a.figure, "displayLines").name("Display Lines").onChange(function () {
        objOfScene.tubesArray.toggleVisible(b)
    });
    c.add(a.figure, "displayCircle").name("Display Sphere").onChange(function () {
        objOfScene.sphere.toggleVisible(b)
    });
    c.add(a.figure, "fillFigure").name("Display Figure").onChange(function () {
        objOfScene.shape.toggleVisible(b)
    });
    c.add(a, "visible").name("Global Visible").onChange(function (a) {
        objOfScene.tipsArray.toggleVisible(b, a, !0);
        objOfScene.helpers.toggleVisible(b)
    });
    c.addColor(a, "colorNumbers").name("Color Numbers").onChange(function (a) {
        objOfScene.pointsArray.changeColor(a.substr(1), b)
    });
    c.addColor(a, "colorCircle").name("Color Sphere").onChange(function (a) {
        objOfScene.sphere.changeColor(a.substr(1), b)
    });
    c.addColor(a, "colorTubes").name("Color Tubes").onChange(function (a) {
        objOfScene.tubesArray.changeColor(a.substr(1), b)
    });
    c.addColor(a, "colorFill").name("Color Figure").onChange(function (a) {
        objOfScene.shape.changeColor(a.substr(1), b)
    });
    c.add(a, "opacity").min(0).max(100).step(10).name("Fill Transparency").onChange(function (a) {
        objOfScene.shape.changeOpacity(a /
            100, b)
    });
    this.addRevolModeData(b);
    $(".hue-field").width(10)
}, addRevolModeData: function (a) {
    var b = {figureSet: {startT: 0, durationAn: 0, x: 0, y: 0, z: 0}, timeFigureBegn: 0, curStrtDurtnAnmt: []}, c;
    c = this.figureAnimateSet.addFolder(a);
    c.add(b.figureSet, "x").name("X-speed").min(-100).max(100).step(1).onChange(function (d) {
        getCurObjSpeed(a).x = d
    });
    c.add(b.figureSet, "y").name("Y-speed").min(-100).max(100).step(1).onChange(function (d) {
        getCurObjSpeed(a).y = d
    });
    c.add(b.figureSet, "z").name("Z-speed").min(-100).max(100).step(1).onChange(function (d) {
        getCurObjSpeed(a).z =
            d
    });
    this.addFigureAnimSet(c, a, b)
}, addFigureAnimSet: function (a, b) {
    var c = {startT: 0, durationAn: 0, x: 0, y: 0, z: 0}, d;
    d = a.add(c, "startT").min(0).max(generateParameters.generalSet.lastDuratValue).step(1).name("Start Animation");
    d.onChange(function (a) {
        var d = getCurObjSpeed(b);
        d.time = a;
        this.addNewDuration(generateParameters.generalSet.lastDuratValue - a, d, b)
    });
    c = a.add(c, "durationAn").min(0).max(generateParameters.generalSet.lastDuratValue).step(1).name("Animate Duration");
    c.onChange(function (a) {
        getCurObjSpeed(b).duration =
            a
    });
    this.addOrSetAnmtSpeeObj(b, d, c, a)
}, addNewDuration: function (a, b, c) {
    b.durAn.domElement.remove();
    b.curFigSet.remove(b.durAn);
    a = b.curFigSet.add({durationAn: 0}, "durationAn").min(0).max(a).step(1).name("Animate Duration");
    a.onChange(function (a) {
        getCurObjSpeed(c).duration = a
    });
    this.addOrSetAnmtSpeeObj(c, null, a, b)
}, addOrSetAnmtSpeeObj: function (a, b, c, d) {
    for (var g = 0; g < animateSpeedOfObj.length; g++)if (animateSpeedOfObj[g].name == a) {
        b && (animateSpeedOfObj[g].startAn = b);
        c && (animateSpeedOfObj[g].durAn = c);
        return
    }
    animateSpeedOfObj.push({name: a,
        x: 0, y: 0, z: 0, time: 0, duration: 0, startAn: b, durAn: c, curFigSet: d})
}}, guiPanel = {generateParameters: "", coord: "", btn: ""};
App.Run = function () {
    App.scene = new THREE.Scene;
    App.scene2 = new THREE.Scene;
    App.scene.fog = new THREE.FogExp2(13421772, .002);
    App.scene2.fog = new THREE.FogExp2(13421823, .002);
    init();
    animate()
};
function getFactorByRadius(a, b, c, d) {
    return 2 >= a ? b : 2 < a && 5 > a ? c : d
}
var lastCheck = {
    point: [],
    angle: [],
    addEl: function (name, val, lastVal) {
        for (var i = 0; i < lastVal.length; i++) {
            if (lastVal[i].name = name) {
                lastVal[i].value = val;
                return;
            }
        }
        lastVal.push({ name: name, value: val });
    },
    getEl: function (name, lastVal) {
        for (var i = 0; i < lastVal.length; i++) {
            if (lastVal[i].name = name) {
                return lastVal[i].value;
            }
        }
    }
};


App.rebuildNodes = function (a) {
    var b = [];
    number = a;
    objOfScene = new THREE.Object3D;
    objOfScene.isAnimateObject = !0;
    App.scene.add(objOfScene);
    objOfScene.name = previousNumber && previousNumber === number ? previousNameFolder + "1" : "Figure " + number;
    objOfScene.pointsArray = [];
    objOfScene.tipsArray = [];
    objOfScene.linesArray = [];
    objOfScene.tubesArray = [];
    objOfScene.corners = [];
    objOfScene.isAlreadySetNewGlobalPos = !1;
    objOfScene.tipsObject = new THREE.Object3D;
    objOfScene.tipsObject.parentNam = objOfScene.name;
    App.scene2.add(objOfScene.tipsObject);
    objOfScene.helpers = {toggleVisible: function (a) {
        (a = getObjByName(a)) ? a.visible = a.visible ? !1 : !0 : alert("sorry")
    }, drawPoints: function (a, c) {
        radiusOfMainSphere = sphereRadius(c, average(c));
        $.each(a, function (a, d) {
            var c = new THREE.SphereGeometry(.08, 32, 32);
            c.applyMatrix((new THREE.Matrix4).makeTranslation(0, 0, 0));
            var g = new THREE.MeshNormalMaterial;
            objOfScene.Sprite = spriteCreator(d[0] + "" + d[1] + "" + d[2], {fontsize: 27});
            objOfScene.Sprite.category ='point';
            objOfScene.pointSphere = new THREE.Mesh(c, g);
            objOfScene.pointSphere.position.set(d[0], d[1], d[2]);
            App.scene2.add(objOfScene.Sprite);
            objOfScene.Sprite.position.copy(objOfScene.pointSphere.position);
            objOfScene.Sprite.position.y += .27;
            objOfScene.pointsArray.push(objOfScene.pointSphere);
            objOfScene.tipsArray.push(objOfScene.Sprite);
            objOfScene.tipsObject.add(objOfScene.Sprite);
            objOfScene.add(objOfScene.pointSphere);
            b.push(objOfScene.pointSphere)
        });
        objOfScene.tipsArray.toggleVisible = function (a, d, b) {
            var c = getObjByName(a);
            if (c && (b && lastCheck.getEl(a,lastCheck.point) || c.visible)){
                for (a = 0; a < c.tipsArray.length; a++){
                    if(c.tipsArray[a].category =='point'){
                    c.tipsArray[a].visible = d
                    }
                }
            }
        };
        objOfScene.tipsArray.angleVisible = function (a, d, b) {
            var c = getObjByName(a);
            if (c && (b && lastCheck.getEl(a,lastCheck.angle) || c.visible)){
                for (a = 0; a < c.tipsArray.length; a++){
                    if(c.tipsArray[a].category =='angle'){
                        c.tipsArray[a].visible = d
                    }
                }
            }
        };
        objOfScene.pointsArray.toggleVisible =
            function (a) {
                if (a = getObjByName(a))for (var d = 0; d < a.pointsArray.length; d++)a.pointSphere = a.pointsArray[d], a.pointSphere.visible ? a.pointSphere.visible = !1 : a.pointSphere.visible = !0
            };
        objOfScene.pointsArray.changeColor = function (a, d) {
            var b = getObjByName(d);
            if (b)for (var c = 0; c < b.pointsArray.length; c++)b.pointSphere = b.pointsArray[c], b.pointSphere.material = new THREE.MeshLambertMaterial({color: 16771899}), b.pointSphere.material.color.setHex("0x" + a)
        }
    }, drawConnections: function (a) {
        for (; a.length;) {
            var b = a.shift();
            c.push(b);
            $.each(a, function (a, d) {
                var c = new THREE.MeshNormalMaterial, h = new THREE.Vector3(b.position.x, b.position.y, b.position.z), l = new THREE.Vector3(d.position.x, d.position.y, d.position.z), m = tubeLineGeometry(h, l);
                objOfScene.tube = new THREE.Mesh(m, c);
                objOfScene.tube.line = {vBegn: h, vEnd: l};
                objOfScene.tubesArray.push(objOfScene.tube);
                objOfScene.add(objOfScene.tube)
            })
        }
        objOfScene.tubesArray.toggleVisible = function (a) {
            if (a = getObjByName(a))for (var b = 0; b < a.tubesArray.length; b++)a.cutLine = a.tubesArray[b], a.cutLine.visible ?
                a.cutLine.visible = !1 : a.cutLine.visible = !0
        };
        objOfScene.tubesArray.changeColor = function (a, b) {
            var d = getObjByName(b);
            if (d)for (var c = 0; c < d.tubesArray.length; c++)d.cutLine = d.tubesArray[c], d.cutLine.material = new THREE.MeshLambertMaterial({color: 16773494}), d.cutLine.material.color.setHex("0x" + a)
        }
    }, drawCircle: function (a) {
        var b = average(a), c = sphereRadius(a, b);
        red = c;
        cylinder = b;
        var c = new THREE.SphereGeometry(c, 32, 32), e = new THREE.MeshNormalMaterial({transparent: !0, opacity: .2});
        objOfScene.sphere = new THREE.Mesh(c,
            e);
        objOfScene.sphere.renderOrder = 2;
        3 < a.toString().length ? objOfScene.sphere.position.set(sphereCenter.c_xy, sphereCenter.c_xy, sphereCenter.c_z) : objOfScene.sphere.position.set(b, b, b);
        objOfScene.add(objOfScene.sphere);
        objOfScene.sphere.toggleVisible = function (a) {
            if (a = getObjByName(a))a.sphere.visible ? a.sphere.visible = !1 : a.sphere.visible = !0
        };
        objOfScene.sphere.changeColor = function (a, b) {
            var d = getObjByName(b);
            d && (d.sphere.material = new THREE.MeshLambertMaterial({color: 16777215, transparent: !0, opacity: .2}), d.sphere.material.color.setHex("0x" +
                a))
        }
    }, drawShape: function (a, b) {
        var c = createMultipointPolygon(a, b), e = new THREE.MeshBasicMaterial({color: 9442024, side: THREE.DoubleSide, transparent: !0, opacity: .05});
        objOfScene.shape = new THREE.Mesh(c, e);
        objOfScene.shape.castShadow = !0;
        objOfScene.shape.receiveShadow = !1;
        objOfScene.add(objOfScene.shape);
        objOfScene.shape.toggleVisible = function (a) {
            if (a = getObjByName(a))a.shape.visible ? a.shape.visible = !1 : a.shape.visible = !0
        };
        objOfScene.shape.changeColor = function (a, b) {
            var d = getObjByName(b);
            d && (d.shape.material =
                new THREE.MeshBasicMaterial({color: 7798531, side: THREE.DoubleSide, transparent: !0, opacity: .2}), d.shape.material.color.setHex("0x" + a))
        };
        objOfScene.shape.changeOpacity = function (a, b) {
            var d = getObjByName(b);
            d && (d.shape.material.opacity = a)
        }
    }, drawCorners: function (a) {
        for (var b, c, e = !0, f = 0, h = []; f < a.length;) {
            c = a[f++];
            e && (e = !1, a.push(c));
            h = [];
            $.each(a, function (a, b) {
                var d = b.position;
                b !== c && h.push(d)
            });
            for (var l = h.length, m = 0; m < l; m++) {
                b = new THREE.Raycaster;
                var p = (new THREE.Vector3).subVectors(h[m], c.position);
                b.set(c.position,
                    p.clone().normalize());
                b = b.intersectObjects(objOfScene.tubesArray, !0);
                for (p = 0; p < b.length; p++) {
                    var q = Math.round(b[p].point.x) + "" + Math.round(b[p].point.y) + "" + Math.round(b[p].point.z);
                    h[m].x == Math.round(b[p].point.x) && h[m].y == Math.round(b[p].point.y) && h[m].z == Math.round(b[p].point.z) ? f < a.length && a[f].position != h[m] && this.createAngle(a[f].position, c.position, h[m]) : checkIntersectPoint(q) ? checkAccesessIntersectPoint(q, c.position) && this.createAngle(b[p], c, !1) : (intersectPoint.push(q), accessPoint.push({key: h[m],
                        value: q}), this.createAngle(b[p], c, !1))
                }
            }
        }
    }, createAngle: function (a, b, c) {
        var e, f = [];
        c ? (e = getCornerBtwTwoVercorsAndIntrsctinPnt(a, b, c), c = getPositionForValueOfCorner(b, c, a, !1)) : (e = getCornerBtwTwoVercorsAndIntrsctinPnt(a.object.line.vBegn, b.position, a.point), c = getPositionForValueOfCorner(b.position, a.point, a.object.line.vBegn, !1), f.push({angle: parseFloat(e), position: c}), e = getCornerBtwTwoVercorsAndIntrsctinPnt(a.object.line.vEnd, b.position, a.point), c = getPositionForValueOfCorner(b.position, a.point, a.object.line.vEnd,
            !1));
        f.push({angle: parseFloat(e), position: c});
        a = this.checkCorrectAnge(f);
        for (b = 0; b < a.length; b++){
            objOfScene.Sprite = spriteCreator(a[b].angle + "\u00b0", {fontsize: 12, borderThickness: 1, canvasWidth: 2, canvasHeight: 39}),
                objOfScene.Sprite.category ='angle',
                objOfScene.Sprite.position.set(a[b].position.x, a[b].position.y, a[b].position.z),
                objOfScene.tipsArray.push(objOfScene.Sprite),
                objOfScene.tipsObject.add(objOfScene.Sprite)
        }
    }, listTriangles: [], setCurrentObj: function (a) {
        for (var b = 0; b < this.listTriangles.length; b++)if (a == this.listTriangles[b].point) {
            this.listTriangles[b].value +=
                1;
            return
        }
        this.listTriangles.push({point: a, value: 0})
    }, checkCorrectAnge: function (a) {
        for (var b = [], c = 0, e = 0; e < a.length; e++) {
            var f = Math.round(a[e].angle), c = c + f;
            b.push({angle: f, position: a[e].position})
        }
        if (360 == 2 * c || 1 == a.length)return b;
        a[0].angle = Math.floor(a[0].angle);
        a[1].angle = Math.floor(a[1].angle);
        return a
    }, init: function (a, b, c, e) {
        this.drawPoints(a, c);
        this.drawConnections(b);
        this.drawCircle(c);
        this.drawShape(a, c);
        5 > c.toString().length && this.drawCorners(e)
    }, animateObj: function (a) {
        var b = getCurObjSpeed(a),
            c = getObjByName(a);
        c.isAlreadySetNewGlobalPos || (c.isAlreadySetNewGlobalPos = !0, this.translateAllChildrenBySphereCenter(c));
        setTimeout(function () {
            var a = (new Date).getTime(), a = a + 1E3 * b.duration, d = setInterval(function () {
                a > (new Date).getTime() ? (c.rotation.x += b.x / 500, c.rotation.y += b.y / 500, c.rotation.z += b.z / 500, c.tipsObject.rotation.x += b.x / 500, c.tipsObject.rotation.y += b.y / 500, c.tipsObject.rotation.z += b.z / 500) : clearInterval(d)
            }, 95)
        }, 1E3 * b.time)
    }, translateAllChildrenBySphereCenter: function (a) {
        var b = a.sphere.position;
        a.position.set(b.x, b.y, b.z);
        for (var b = a.position, c = 0; c < a.children.length; c++) {
            var e = a.children[c].position;
            a.children[c].position.set(e.x - b.x, e.y - b.y, e.z - b.z)
        }
        e = App.scene2.children;
        for (c = 0; c < e.length; c++)if (e[c].parentNam && e[c].parentNam == a.name) {
            e[c].position.set(b.x, b.y, b.z);
            for (var f = 0; f < e[c].children.length; f++) {
                var h = e[c].children[f].position;
                e[c].children[f].position.set(h.x - b.x, h.y - b.x, h.z - b.x)
            }
        }
    }};
    var c = [];
    objOfScene.helpers.init(resArr, b, num, c);
    listObjOfScene.push(objOfScene)
};
App.rebuildCubes = {changeColorLittleCubes: function (a) {
    for (var b = 0; b < cubeHelper.children.length; b++)cubeHelper.children[b].category && "littleCube" == cubeHelper.children[b].category && cubeHelper.children[b].children[0].material.color.set(a)
}, changeColorMainCube: function (a) {
    for (var b = 0; b < cubeHelper.children.length; b++)if (cubeHelper.children[b].category && "mainCube" == cubeHelper.children[b].category) {
        cubeHelper.children[b].material.color.set(a);
        break
    }
}, setVisibleForChild: function (a, b) {
    for (var c = 0; c < cubeHelper.children.length; c++)cubeHelper.children[c].category &&
        cubeHelper.children[c].category == b && (cubeHelper.children[c].visible = a)
}};
App.rebuildSkyBox = {changeBackground: function (a) {
    var b;
    skyBox.visible = !0;
    switch (a) {
        case "mountain":
            b = "img/dawnmountain-xpos.png img/dawnmountain-xneg.png img/dawnmountain-ypos.png img/dawnmountain-yneg.png img/dawnmountain-zpos.png img/dawnmountain-zneg.png".split(" ");
            break;
        case "siege":
            b = "img/siege_ft.png img/siege_bk.png img/siege_up.png img/siege_dn.png img/siege_rt.png img/siege_lf.png".split(" ");
            break;
        case "starfield":
            b = "img/starfield_ft.png img/starfield_bk.png img/starfield_up.png img/starfield_dn.png img/starfield_rt.png img/starfield_lf.png".split(" ");
            break;
        case "misty":
            b = "img/misty_ft.png img/misty_bk.png img/misty_up.png img/misty_dn.png img/misty_rt.png img/misty_lf.png".split(" ");
            break;
        case "tidepool":
            b = "img/tidepool_ft.png img/tidepool_bk.png img/tidepool_up.png img/tidepool_dn.png img/tidepool_rt.png img/tidepool_lf.png".split(" ");
            break;
        case "NONE":
            skyBox.visible = !1;
            return
    }
    a = [];
    for (var c = 0; 6 > c; c++) {
        var d = new THREE.MeshBasicMaterial({map: THREE.ImageUtils.loadTexture(b[c]), side: THREE.BackSide});
        a.push(d)
    }
    skyBox.material = new THREE.MeshFaceMaterial(a)
}};
function getObjByName(a) {
    for (var b = 0; b < listObjOfScene.length; b++)if (listObjOfScene[b].name == a)return listObjOfScene[b]
}
function appendHtmlToolBar() {
    var a = $('<div class="row clickableTab"></div>'), b = $('<div class="col-sm-2" style="height: 21px"><img src="assets/img/realistic_eye.png" class="eyeIcon"></div>').click(function () {
        objOfScene.helpers.toggleVisible();
        $(this).find("img").toggle()
    }), c = "#" + number, d = $('<div data-toggle="collapse" class="col-sm-8 collapsed" href="' + c + '">' + objOfScene.name + "</div>"), c = $('<span class="glyphicon glyphicon-chevron-down col-sm-2" data-toggle="collapse" href="' + c + '">');
    a.append(b);
    a.append(d);
    a.append(c);
    $("#figures").append(a);
    var a = $('<div class="row collapse" id="' + number + '" class="panel-collapse collapse"></div>'), b = $('<div class="row"><div class="col-sm-10">Display Numbers</div></div>'), d = $('<div class="row"><div class="col-sm-10">Display Lines</div></div>'), c = $('<div class="row"><div class="col-sm-10">Display Circle</div></div>'), g = $('<div class="row"><div class="col-sm-10">Fill the figure</div></div>'), k = $('<div class="row"><div class="col-sm-6">Numbers</div></div>'), e = $('<div class="row"><div class="col-sm-6">Lines</div></div>'),
        f = $('<div class="row"><div class="col-sm-6">Circle</div></div>'), h = $('<div class="row"><div class="col-sm-6">Fill</div></div>'), l = $('<div class="col-sm-2" style="height: 21px"><img src="assets/img/realistic_eye.png" class="eyeIcon"></div>').click(function () {
            objOfScene.pointsArray.toggleVisible();
            $(this).find("img").toggle()
        }), m = $('<div class="col-sm-2" style="height: 21px"><img src="assets/img/realistic_eye.png" class="eyeIcon"></div>').click(function () {
            objOfScene.tubesArray.toggleVisible();
            $(this).find("img").toggle()
        }),
        p = $('<div class="col-sm-2" style="height: 21px"><img src="assets/img/realistic_eye.png" class="eyeIcon"></div>').click(function () {
            objOfScene.sphere.toggleVisible();
            $(this).find("img").toggle()
        }), q = $('<div class="col-sm-2" style="height: 21px"><img src="assets/img/realistic_eye.png" class="eyeIcon"></div>').click(function () {
            objOfScene.shape.toggleVisible();
            $(this).find("img").toggle()
        }), u = $('<div class="col-sm-6"><input class="color" style="width: 100%" onchange="defaultPointColor=this.color.toString();"></div>').change(function () {
            objOfScene.pointsArray.changeColor(defaultPointColor)
        }),
        v = $('<div class="col-sm-6"><input class="color" style="width: 100%" onchange="defaultPointColor=this.color.toString();"></div>').change(function () {
            objOfScene.tubesArray.changeColor(defaultPointColor)
        }), t = $('<div class="col-sm-6"><input class="color" style="width: 100%" onchange="defaultPointColor=this.color.toString();"></div>').change(function () {
            objOfScene.sphere.changeColor(defaultPointColor)
        }), n = $('<div class="col-sm-6"><input class="color" style="width: 100%" onchange="defaultPointColor=this.color.toString();"></div>').change(function () {
            objOfScene.shape.changeColor(defaultPointColor)
        });
    b.append(l);
    a.append(b);
    $("#figures").append(a);
    d.append(m);
    a.append(d);
    $("#figures").append(a);
    c.append(p);
    a.append(c);
    $("#figures").append(a);
    g.append(q);
    a.append(g);
    $("#figures").append(a);
    k.append(u);
    a.append(k);
    $("#figures").append(a);
    e.append(v);
    a.append(e);
    $("#figures").append(a);
    f.append(t);
    a.append(f);
    $("#figures").append(a);
    h.append(n);
    a.append(h);
    $("#figures").append(a);
    jscolor.bind()
}
function init() {
    var a = new THREE.DirectionalLight(16777215), b = new THREE.Mesh(new THREE.BoxGeometry(9, 9, 9), new THREE.MeshBasicMaterial(16711935)), b = new THREE.BoxHelper(b);
    cubeHelper = new THREE.Object3D;
    axes = new THREE.AxisHelper(100);
    App.scene.add(axes);
    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, .01, 1E3);
    camera.position.set(14, 14, 14);
    container = document.getElementById("THREEJS");
    a.position.set(10, 10, 10);
    App.scene.add(a);
    renderer = new THREE.WebGLRenderer({antialias: !0});
    renderer.autoClear = !1;
    renderer.setClearColor(App.scene.fog.color);
    renderer.setClearColor(App.scene2.fog.color);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    b.material.color.set(16711680);
    b.category = "mainCube";
    cubeHelper.position.set(4.5, 4.5, 4.5);
    cubeHelper.add(b);
    b = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({color: 16711680}));
    for (a = -4; 6 > a; a++) {
        var c = b.clone(), d = new THREE.BoxHelper(c);
        d.material.color.set(255);
        c = new THREE.Object3D;
        c.category = "littleCube";
        c.add(d);
        c.position.set(a, 0, 0);
        d = spriteCreator(a + 4 + "00", {fontsize: 27});
        d.position.set(a - .5, 0, 0);
        d.category = "cubeLabel";
        cubeHelper.add(d);
        5 > a && cubeHelper.add(c);
        for (c = -4; 6 > c; c++) {
            d = b.clone();
            d = new THREE.BoxHelper(d);
            d.material.color.set(255);
            var g = new THREE.Object3D;
            g.category = "littleCube";
            g.add(d);
            g.position.set(a, c, 0);
            5 > a && 5 > c && cubeHelper.add(g);
            d = spriteCreator(a + 4 + "" + (c + 4) + "0", {fontsize: 27});
            d.position.set(a - .5, c - .5, 0);
            d.category = "cubeLabel";
            cubeHelper.add(d);
            for (d = -4; 6 >
                d; d++) {
                g = b.clone();
                g = new THREE.BoxHelper(g);
                g.material.color.set(255);
                var k = new THREE.Object3D;
                k.category = "littleCube";
                k.add(g);
                k.position.set(a, c, d);
                5 > a && 5 > c && 5 > d && cubeHelper.add(k);
                g = spriteCreator(a + 4 + "" + (c + 4) + "" + (d + 4), {fontsize: 27});
                g.position.set(a - .5, c - .5, d - .5);
                g.category = "cubeLabel";
                cubeHelper.add(g)
            }
        }
    }
    App.scene.add(cubeHelper);
    container.appendChild(renderer.domElement);
    controls = new THREE.TrackballControls(camera, renderer.domElement);
    controls.rotateSpeed = 10;
    controls.zoomSpeed = 1.2;
    controls.panSpeed =
        .8;
    controls.noZoom = !1;
    controls.noPan = !1;
    controls.staticMoving = !0;
    controls.dynamicDampingFactor = .3;
    controls.keys = [65, 83, 68];
    controls.minDistance = 0;
    controls.maxDistance = 300;
    b = "img/dawnmountain-xpos.png img/dawnmountain-xneg.png img/dawnmountain-ypos.png img/dawnmountain-yneg.png img/dawnmountain-zpos.png img/dawnmountain-zneg.png".split(" ");
    c = [];
    for (a = 0; 6 > a; a++)c.push(new THREE.MeshBasicMaterial({map: THREE.ImageUtils.loadTexture(b[a]), side: THREE.BackSide}));
    new THREE.MeshFaceMaterial(c);
    a = new THREE.BoxGeometry(500,
        500, 500);
    skyBox = new THREE.Mesh(a, b);
    skyBox.visible = !1;
    App.scene.add(skyBox);
    addControlPanel();
    b = $(".property-name");
    for (a = 0; a < b.length; a++)"Main Visible" == b[a].childNodes[0].data ? $(b[a].closest("div")).find(".c")[0].children[0].click() : "Enter Coordinates:" == b[a].childNodes[0].data && (guiPanel.btn = guiPanel.generaFolder.add(guiPanel.generateParameters, "generate").name("Create!"), guiPanel.btn.domElement.click());
    window.addEventListener("resize", onWindowResize, !1);
    render()
}
function addControlPanel() {
    function a(a) {
        for (var b = 0; b < resArr.length; b++)f[b].domElement.remove(), a.remove(f[b]);
        resArr && a.remove(guiPanel.btn)
    }

    function b(a) {
        a = {visible: !0, opacity: 5, figure: {displayNumbers: !0, displayPoints: !0,displayAngle: !0, displayLines: !0, displayCircle: !0, fillFigure: !0}, colorNumbers: "#9012e8", colorTubes: "#22a6cf", colorCircle: "#22a6cf", colorFill: "#22a6cf"};
        var b = "Figure " + h;
        previousNumber && previousNumber === h && (b = previousNameFolder + "1", num += " |");
        previousNumber = h;
        previousNameFolder = b;
        var d = p.addFolder("Figure " +
            num);
        lastCheck.addEl(b, !0, lastCheck.point);
        lastCheck.addEl(b, !0, lastCheck.angle);
        d.add(a.figure, "displayPoints").name("Display Points").onChange(function (a) {
            objOfScene.tipsArray.toggleVisible(b, a);
            objOfScene.pointsArray.toggleVisible(b);
            lastCheck.addEl(b, a,lastCheck.point);
        });
        d.add(a.figure, "displayAngle").name("Display Angle").onChange(function (a) {
            objOfScene.tipsArray.angleVisible(b, a);
            lastCheck.addEl(b, a,lastCheck.angle);
        });
        d.add(a.figure, "displayLines").name("Display Lines").onChange(function () {
            objOfScene.tubesArray.toggleVisible(b)
        });
        d.add(a.figure, "displayCircle").name("Display Sphere").onChange(function () {
            objOfScene.sphere.toggleVisible(b)
        });
        d.add(a.figure, "fillFigure").name("Display Figure").onChange(function () {
            objOfScene.shape.toggleVisible(b)
        });
        d.add(a, "visible").name("Global Visible").onChange(function (a) {
            objOfScene.tipsArray.toggleVisible(b, a, !0);
            objOfScene.tipsArray.angleVisible(b, a, !0);
            objOfScene.helpers.toggleVisible(b)
        });
        d.addColor(a, "colorNumbers").name("Color Numbers").onChange(function (a) {
            objOfScene.pointsArray.changeColor(a.substr(1), b)
        });
        d.addColor(a, "colorCircle").name("Color Sphere").onChange(function (a) {
            objOfScene.sphere.changeColor(a.substr(1), b)
        });
        d.addColor(a, "colorTubes").name("Color Tubes").onChange(function (a) {
            objOfScene.tubesArray.changeColor(a.substr(1), b)
        });
        d.addColor(a, "colorFill").name("Color Figure").onChange(function (a) {
            objOfScene.shape.changeColor(a.substr(1), b)
        });
        d.add(a, "opacity").min(0).max(100).step(10).name("Fill Transparency").onChange(function (a) {
            objOfScene.shape.changeOpacity(a / 100, b)
        });
        c(b);
        $(".hue-field").width(10)
    }

    function c(a) {
        var b = {figureSet: {startT: 0, durationAn: 0, x: 0, y: 0, z: 0}, timeFigureBegn: 0, curStrtDurtnAnmt: []}, c;
        c = u.addFolder(a);
        c.add(b.figureSet, "x").name("X-speed").min(-100).max(100).step(1).onChange(function (b) {
            getCurObjSpeed(a).x =
                b
        });
        c.add(b.figureSet, "y").name("Y-speed").min(-100).max(100).step(1).onChange(function (b) {
            getCurObjSpeed(a).y = b
        });
        c.add(b.figureSet, "z").name("Z-speed").min(-100).max(100).step(1).onChange(function (b) {
            getCurObjSpeed(a).z = b
        });
        d(c, a, b)
    }

    function d(a, b) {
        var c = {startT: 0, durationAn: 0, x: 0, y: 0, z: 0}, d;
        d = a.add(c, "startT").min(0).max(n.generalSet.lastDuratValue).step(1).name("Start Animation");
        d.onChange(function (a) {
            var c = getCurObjSpeed(b);
            c.time = a;
            g(n.generalSet.lastDuratValue - a, c, b)
        });
        c = a.add(c, "durationAn").min(0).max(n.generalSet.lastDuratValue).step(1).name("Animate Duration");
        c.onChange(function (a) {
            getCurObjSpeed(b).duration = a
        });
        k(b, d, c, a)
    }

    function g(a, b, c) {
        b.durAn.domElement.remove();
        b.curFigSet.remove(b.durAn);
        a = b.curFigSet.add({durationAn: 0}, "durationAn").min(0).max(a).step(1).name("Animate Duration");
        a.onChange(function (a) {
            getCurObjSpeed(c).duration = a
        });
        k(c, null, a, b)
    }

    function k(a, b, c, d) {
        for (var e = 0; e < animateSpeedOfObj.length; e++)if (animateSpeedOfObj[e].name == a) {
            b && (animateSpeedOfObj[e].startAn = b);
            c && (animateSpeedOfObj[e].durAn = c);
            return
        }
        animateSpeedOfObj.push({name: a,
            x: 0, y: 0, z: 0, time: 0, duration: 0, startAn: b, durAn: c, curFigSet: d})
    }

    var e, f = [], h = "909";
    num = 909;
    resArr = generator(num);
    gui = 800 > window.innerWidth ? new dat.GUI({width: 290}) : new dat.GUI({width: 255});
    gui.open();
    var l = gui.addFolder("Menu");
    l.open();
    var m = l.addFolder("Generation"), p = l.addFolder("Edit");
    l.addFolder("List of the Keys");
    l.addFolder("Angles and Surfaces");
    var q = l.addFolder("Revolution Mode"), u = q.addFolder("Figure Settings"), v = q.addFolder("General Settings"), t = m.addFolder("Coordinates"), l = l.addFolder("General Settings"),
        n = {moreThan3: !1, number: 909, coords: "", generate: function () {
            App.rebuildNodes(h);
            b(num)
        }, startAnimation: function () {
            for (var a = !1, b = 0; b < App.scene.children.length; b++)App.scene.children[b].isAnimateObject && (a = !0, App.scene.children[b].helpers.animateObj(App.scene.children[b].name));
            a || alert("you do not have any object to animate")
        }, generalSet: {duration: 180, lastDuratValue: 180}, maxGenereDurtn: 180, cubeVisible: !0, mainCubeColor: 16515220, littleCubesColor: 796663, listTexture: []};
    guiPanel.generateParameters = n;
    guiPanel.coord =
        t;
    guiPanel.generaFolder = m;
    for (var r = 0; r < resArr.length; r++)n.coords[r] = [], n.coords = resArr[r][0] + "," + resArr[r][1] + "," + resArr[r][2], f[r] = t.add(n, "coords").name("Coordinate " + r);
    m.add(n, "moreThan3").name("> 3-digit number").onChange(function (b) {
        b ? maxNumber = 99999 : maxNumber = 999;
        m.__controllers.slice(m.__controllers.indexOf(e), 1);
        $(".cr.number.has-slider").eq(0).remove();
        n.number = 0;
        resArr && a(m);
        e = m.add(n, "number", 100).max(maxNumber).step(1).name("Enter Coordinates:").onChange(function (b) {
            h = b;
            if (isNaN(b))alert("Please, input a number.");
            else {
                resArr && a(m);
                num = b;
                resArr = generator(num);
                for (b = 0; b < resArr.length; b++)n.coords = resArr[b][0] + "," + resArr[b][1] + "," + resArr[b][2], f[b] = t.add(n, "coords").name("Coordinate " + b);
                guiPanel.btn = m.add(n, "generate");
                guiPanel.btn.name("Create!")
            }
        })
    });
    e = m.add(n, "number", 100).max(999).step(1).name("Enter Coordinates:").onChange(function (b) {
        h = b;
        if (isNaN(b))alert("Please, input a three-digit number."); else {
            resArr && a(m);
            num = b;
            resArr = generator(num);
            for (b = 0; b < resArr.length; b++)n.coords[b] = [], n.coords = resArr[b][0] +
                "," + resArr[b][1] + "," + resArr[b][2], f[b] = t.add(n, "coords").name("Coordinate " + b);
            guiPanel.btn = m.add(n, "generate");
            guiPanel.btn.name("Create!")
        }
    });
    v.add(n.generalSet, "duration").min(0).max(180).step(1).onChange(function (a) {
        n.generalSet.lastDuratValue = a;
        for (a = 0; a < animateSpeedOfObj.length; a++) {
            var b = animateSpeedOfObj[a];
            b.startAn.domElement.remove();
            b.durAn.domElement.remove();
            b.curFigSet.remove(b.startAn);
            b.curFigSet.remove(b.durAn);
            d(b.curFigSet, b.name)
        }
    });
    q.add(n, "startAnimation").name("Begin");
    l.add(n,
        "cubeVisible").name("Main Visible").onChange(function (a) {
            cubeHelper.visible = a
        });
    l.add(n, "cubeVisible").name("Cube Visible").onChange(function (a) {
        cubeHelper.getObjectByProperty("category", "mainCube").visible = a
    });
    l.add(n, "cubeVisible").name("Cubes Visible").onChange(function (a) {
        App.rebuildCubes.setVisibleForChild(a, "littleCube")
    });
    l.add(n, "cubeVisible").name("Point Label Visible").onChange(function (a) {
        App.rebuildCubes.setVisibleForChild(a, "cubeLabel")
    });
    l.addColor(n, "mainCubeColor").name("Main Cube Color").onChange(function (a) {
        App.rebuildCubes.changeColorMainCube(a)
    });
    l.addColor(n, "littleCubesColor").name("Color for cubes").onChange(function (a) {
        App.rebuildCubes.changeColorLittleCubes(a)
    });
    l.add(n, "listTexture", "NONE mountain siege starfield misty tidepool".split(" ")).name("Background").onChange(function (a) {
        App.rebuildSkyBox.changeBackground(a)
    });
    $(".hue-field").width(10);
    $("select").css("color", "black")
}
function getCurObjSpeed(a) {
    for (var b = 0; b < animateSpeedOfObj.length; b++)if (animateSpeedOfObj[b].name == a)return animateSpeedOfObj[b]
}
function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    controls.handleResize();
    render()
}
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    render()
}
function render() {
    renderer.clear();
    renderer.render(App.scene, camera);
    renderer.clearDepth();
    renderer.render(App.scene2, camera)
}
function drawLine(a, b, c) {
    var d = new THREE.LineBasicMaterial({color: 16776960}), g = new THREE.Geometry;
    g.vertices.push(new THREE.Vector3(a.position.x, a.position.y, a.position.z));
    g.vertices.push(new THREE.Vector3(b.position.x, b.position.y, b.position.z));
    a = new THREE.Line(g, d);
    c.add(a)
}
function generator(a) {
    function b(a, b) {
        if (isNaN(a) || isNaN(b))return!1;
        var c = Math.pow(10, b);
        return Math.round(a * c) / c
    }

    var c = function (a) {
        function b(a, c) {
            var d, e = [];
            for (d = a.length; 0 <= d; d--)e.push([].concat(a.slice(0, d), [c], a.slice(d, void 0)));
            return e
        }

        var c, d, e, f, g = a.length;
        d = [
            [a[0]]
        ];
        for (f = 1; f < g; f++)e = a[f], c = d, d = [], c.forEach(function (a) {
            d = d.concat(b(a, e))
        });
        return d
    }(function (a) {
        for (var b = [], c = 1, d = 0; d < a.toString().length; d++)b.unshift((a / c | 0) % 10), c *= 10;
        return b
    }(a)), d = [];
    $("#coords").html("");
    if (3 < a.toString().length)for (var g,
                                         k, e = 0; e < c.length; e++) {
        d[e] = [];
        d[e][0] = c[e][0];
        d[e][1] = c[e][1];
        d[e][2] = c[e][2];
        g = 0;
        k = 10;
        for (var f = 3; f < c[e].length; f++)g = c[e][f] / k, k *= 10, d[e][2] += g;
        d[e][2] = b(d[e][2], a.toString().length - 3)
    } else d = c;
    for (e = 0; e < d.length; e++)$("#coords").append(d[e] + "<br>");
    var h = {}, d = d.filter(function (a) {
        return a in h ? 0 : h[a] = 1
    });
    return sortMasiveOfPoints(d)
}
function sortMasiveOfPoints(a) {
    for (var b = [], c = !0, d, g = 0; g < a.length; g++) {
        c && (c = !1, d = a[g], b.push(d));
        for (var k = [], e = 0; e < a.length; e++) {
            var f;
            if (f = d != a[e]) {
                a:{
                    for (f = 0; f < b.length; f++)if (a[e] == b[f]) {
                        f = !0;
                        break a
                    }
                    f = !1
                }
                f = !f
            }
            f && k.push({dist: Math.sqrt((a[e][0] - d[0]) * (a[e][0] - d[0]) + (a[e][1] - d[1]) * (a[e][1] - d[1]) + (a[e][2] - d[2]) * (a[e][2] - d[2])), obj: a[e]})
        }
        d = 1E5;
        for (e = f = 0; e < k.length; e++)d > k[e].dist && (d = k[e].dist, f = k[e].obj);
        d = f;
        b.push(f)
    }
    b.pop();
    return b
}
function average(a) {
    for (var b = 0, c = 0; 0 < a;)b += a % 10, a = a / 10 | 0, c++;
    a = b / c;
    controls.target.set(a, a, a);
    return a
}
function sphereRadius(a, b) {
    var c, d, g = a;
    d = c = 0;
    var k, e;
    if (3 < a.toString().length) {
        k = Math.pow(10, a.toString().length - 3);
        a /= k;
        for (k = 0; k < resArr.length; k++)c += resArr[k][0], d += resArr[k][2];
        sphereCenter.c_xy = k = c / resArr.length;
        sphereCenter.c_z = e = d / resArr.length
    }
    g = a % 10;
    d = (a / 10 | 0) % 10;
    c = (a / 100 | 0) % 10;
    return 3 < a.toString().length ? getMaxRadius({c_xy: k, c_z: e}) : Math.sqrt((c - b) * (c - b) + (d - b) * (d - b) + (g - b) * (g - b))
}
function getMaxRadius(a) {
    for (var b, c = 0, d = 0; d < resArr.length; d++)b = Math.sqrt((resArr[d][0] - a.c_xy) * (resArr[d][0] - a.c_xy) + (resArr[d][1] - a.c_xy) * (resArr[d][1] - a.c_xy) + (resArr[d][2] - a.c_z) * (resArr[d][2] - a.c_z)), b > c && (c = b);
    return c
}
function spriteCreator(a, b) {
    var c = " " + a + " ";
    void 0 === b && (b = {});
    var d = b.hasOwnProperty("fontface") ? b.fontface : "Arial black", g = b.hasOwnProperty("fontsize") ? b.fontsize : 12, k = b.hasOwnProperty("borderThickness") ? b.borderThickness : 12.5, e = b.hasOwnProperty("canvasWidth") ? b.canvasWidth : !1, f = b.hasOwnProperty("canvasHeight") ? b.canvasHeight : !1, h = document.createElement("canvas"), l = e ? e : a.length;
    switch (l) {
        case 2:
            h.width = 2 < a.length ? 16 * a.length : 20 * a.length;
            break;
        case 3:
            h.width = 96;
            break;
        case 4:
            h.width = 121;
            break;
        case 5:
            h.width =
                121;
            break;
        case 6:
            h.width = 140;
            break;
        default:
            h.width = 30 * l
    }
    h.height = f ? f : 60;
    f = h.getContext("2d");
    f.font = "Bold " + g + "px " + d;
    f.measureText(c);
    f.fillStyle = e ? "rgba(255, 255, 0, 1)" : "rgba(255, 255, 255, 1)";
    var d = h.width, m = h.height;
    f.lineJoin = "round";
    f.strokeRect(13.5, 13.5, d - 25, m - 25);
    f.fillRect(13.5, 13.5, d - 25, m - 25);
    f.strokeStyle = "rgba(255, 255, 255, 1)";
    f.lineWidth = e ? k / 2 : k;
    f.fillStyle = "rgba(0, 0, 0, 1.0)";
    m = d = 0;
    e && (d = 9.5, m = 11);
    f.fillText(c, k + d, g + k + m);
    c = new THREE.Texture(h);
    c.needsUpdate = !0;
    c.minFilter = THREE.LinearFilter;
    c.renderOrder = 0;
    c = new THREE.SpriteMaterial({map: c, useScreenCoordinates: !1, rotation: 0});
    a && "_" == a && (c.transparent = !0, c.opacity = 0);
    c = new THREE.Sprite(c);
    switch (l) {
        case 2:
            l = .49;
            break;
        case 3:
            l = .45;
            break;
        case 4:
            l = .56;
            break;
        case 5:
            l = .65;
            break;
        case 6:
            l = .65;
            break;
        default:
            l = .56
    }
    c.scale.set(l, .336, .2);
    ;
    return c
}
function createMultipointPolygon(a, b) {
    if (3 < b) {
        for (var c = new THREE.Geometry, d = 0; d < a.length; d++) {
            var g = a[d];
            c.vertices.push(new THREE.Vector3(g[0], g[1], g[2]));
            for (g = 0; g < a.length; g++)0 < g && g != d && c.faces.push(new THREE.Face3(d, g - 1, g))
        }
        c.computeBoundingSphere()
    } else {
        c = [];
        for (d = 0; d < a.length; d++)c.push(new THREE.Vector3(a[d][0], a[d][1], a[d][2]));
        c = new THREE.ConvexGeometry(c)
    }
    return c
}
function tubeLineGeometry(a, b) {
    var c = new THREE.SplineCurve3([a, b]);
    return new THREE.TubeGeometry(c, 1, .02, 36)
}
function getCornerBtwTwoVercorsAndIntrsctinPnt(a, b, c, d) {
    d && objOfScene.helpers.listTriangles.push({point1: a, point2: b, endPoint: d});
    a = new THREE.Vector3(a.x - c.x, a.y - c.y, a.z - c.z);
    c = new THREE.Vector3(b.x - c.x, b.y - c.y, b.z - c.z);
    b = a.x * c.x + a.y * c.y + a.z * c.z;
    a = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
    c = Math.sqrt(c.x * c.x + c.y * c.y + c.z * c.z);
    return 180 * Math.acos(b / (a * c)) / Math.PI
}
function getPositionForValueOfCorner(a, b, c, d) {
    var g = 0;
    a = getAverageValueOfHighForTriangle(a, c);
    for (a = getAverageValueOfHighForTriangle(a, b); 3 > g++;)a = getAverageValueOfHighForTriangle(a, b);
    d && (a = getAverageValueOfHighForTriangle(a, b));
    return a
}
function getAverageValueOfHighForTriangle(a, b) {
    var c = {};
    c.x = (a.x + b.x) / 2;
    c.y = (a.y + b.y) / 2;
    c.z = (a.z + b.z) / 2;
    return c
}
function checkAccesessIntersectPoint(a, b) {
    for (var c = 0; c < accessPoint.length; c++)if (accessPoint[c].value == a)return accessPoint[c].key == b
}
function checkIntersectPoint(a) {
    for (var b = 0; b < intersectPoint.length; b++)if (intersectPoint[b] == a)return!0
};